package code

import (
	"bytes"
	"encoding/gob"
	"github.com/shopspring/decimal"
	"strings"
)

var (


	creator = "su6e7c6935ce786d30237893d086b6d9c44aa01666"
	logo
	total = 120000000
	precision = "10"
	mineral = 33.9
	name= "nlp"
	gross = "120000000"
	email = "296229236@qq.com"
	site = ""
	rate = "0"
)



/**
publish token
*/
func publish(stub StubInterface, originatorAccount, name,gross,output,site,logo,email,rate,precision string) {
	stub.UpdateAccountBalance(stub, name, originatorAccount, output, precision)
	config := []string{
		originatorAccount,
		name,
		gross,
		output,
		precision,
		site,
		logo,
		email,
		rate,
	}

	var network bytes.Buffer
	enc := gob.NewEncoder(&network)
	enc.Encode(config)
	stub.PutState(name, network.Bytes())
}

/**
Transfer function
 */
func transfer(stub StubInterface, outAccount,inAccount,amount,minerFee,token string)pb.Response {
	var err error
	minerFeeVal, err := decimal.NewDecimalFromString(minerFee)
	if err != nil {
		return shim.Error("Miner fee format error")
	}
	outVal, err := decimal.NewDecimalFromString(amount)
	if err != nil {
		return shim.Error("Transaction quantity format error")
	}
	if outVal.LessThan(decimal.NewFromFloat(0)) {
		return shim.Error("The number of transactions must be greater than 0")
	}
	minerFeeRate, _ := decimal.NewDecimalFromString("0.004")
	rightMinerFee := self.chargeLowLimit
	calFee := outVal.Mul(minerFeeRate).Round(6)
	if calFee.GreaterThan(rightMinerFee) {
		if !calFee.Equal(minerFeeVal) {
			return shim.Error("transfer fee is not right")
		}
		rightMinerFee = calFee
	} else {
		if !minerFeeVal.Equal(rightMinerFee) {
			return shim.Error("transfer fee is not right")
		}
	}
	_, err = stub.updateAccount(outAccount, inAccount, token, outVal, minerFeeVal)
	if err != nil {
		return shim.Error(err.Error())
	}
	return shim.Success([]byte("success"))
}

/**
Query account balance
 */
func balance(stub StubInterface,token,account string)pb.Response{
	if token == "" || account == "" {
		return shim.Error("Parameters cannot be empty")
	}
	token = strings.ToLower(token)
	account = strings.ToLower(account)
	accountVal,err := stub.getBalance(token,account)
	if err != nil {
		return shim.Error(err.Error())
	}
	return shim.Success([]byte(accountVal.String()))
}
